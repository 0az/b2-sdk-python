1.
In the first code block in
doc\source\quick_start.rst

There is a variable overwrite which is not a part of example about how
variable overwrites/namespaces/etc. work and therefore may be misleading
for some users ("So I should initialise and then overwrite?").

I have no recommendation for clearing this up at this moment.

.. code-block:: python

    >>> from b2sdk.v1 import *

    >>> info = InMemoryAccountInfo()  # to store credentials, tokens and cache in memory OR
    >>> info = SqliteAccountInfo()  # to store credentials, tokens and cache in ~/.b2_account_info
    >>> b2_api = B2Api(info)


2.
doc\source\quick_start.rst, lines 30-33:
"""
    >>> application_key_id = '4a5b6c7d8e9f'  # get credentials from from B2 website
    >>> application_key = '001b8e23c26ff6efb941e237deb182b9599a84bef7'
    >>> b2_api.authorize_account("production", application_key_id, application_key)
"""
Does the
# get credentials from from B2 website
pertain to application_key_id only or to all of them? If to more than appplication_key_id, consider pushing it out to a separate line (i.e.:
"""
    >>> # get credentials from from B2 website
    >>> application_key_id = '4a5b6c7d8e9f'
    >>> application_key = '001b8e23c26ff6efb941e237deb182b9599a84bef7'
    >>> b2_api.authorize_account("production", application_key_id, application_key)
"""
)


3.
b2sdk\account_info\sqlite_account_info.py, lines 104-105:
"""
        # Remove the corrupted file and create a new database
        raise CorruptAccountInfo(self.filename)
"""
Is removing corrupted (_how badly_?) corrupted databases a regular
practice? I would opt for a raise exception, creation of a new one
and running some internal or external tool to see if it could be
recovered, instead of deleting it wholesale.


4.
I cannot find these in code, but some of the elements of .. toctree:: in doc\source\api_reference.rst - lines 44-66 - do not have any titles (the fact that some of the others have them non-descriptive or non-helpful is another matter entirely).
    api/internal/utils                      - b2sdk.utils
    api/internal/cache                      - b2sdk.cache
    api/internal/sync/action                - b2sdk.sync.action
    api/internal/sync/exception             - b2sdk.sync.exception
    api/internal/sync/file                  - b2sdk.sync.file
    api/internal/sync/folder                - b2sdk.sync.folder
    api/internal/sync/folder_parser         - b2sdk.sync.folder_parser
    api/internal/sync/policy                - b2sdk.sync.policy
    api/internal/sync/policy_manager        - b2sdk.sync.policy_manager
    api/internal/sync/scan_policies         - b2sdk.sync.scan_policies
    api/internal/sync/sync                  - b2sdk.sync.sync
    api/internal/transferer/file_metadata   - b2sdk.transferer.file_metadata
    api/internal/upload_source              - b2sdk.upload_source


